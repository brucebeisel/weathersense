/* 
 * Copyright (C) 2022 Bruce Beisel
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <iostream>
#include "Weather.h"
#include "VantagePro2Station.h"
#include "Api.h"

using namespace std;

namespace vp2 {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
Api::Api(VantagePro2Station & station) : station(station) {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::processCommand(std::string & command) {
    int pos = command.find_first_of('?');
    if (pos == string::npos) {
        cerr << "Did not find '?' in command: '" << command << "'" << endl;
        return;
    }

    string localString = command.substr(pos);
    string commandName;

    if (commandName == "lamp") {
    }
    else if (commandName == "current-weather") {
        requestCurrentWeather();
    }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::requestSensorStationIds() {
    ostringstream oss;
    std::vector<StationId> list;

    station.retrieveReceiverList(&list);

    oss << "{ \"stationIds\": [";
    for (std::vector<StationId>::iterator it = list.begin(); it != list.end(); ++it) {
        if (it != list.begin())
            oss << ",";
        oss << *it;
    }
    oss << "]}";

    sendResponse(oss.str());
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::requestCurrentWeather() {
    const CurrentWeather & cw = station.getCurrentWeather();
    std::string response = cw.formatXML();
    sendResponse(response);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::requestArchiveData(DateTime after) {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::requestConfigurationInformation() {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::updateConfigurationInformation() {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::requestSensorStationStatus() {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::updateYearlyET(double yearlyET) {
    bool result = station.putYearlyET(yearlyET);
    sendCommandResponse("update-yearly-et", result);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::updateYearlyRainfall(double yearlyRain) {
    bool result = station.putYearlyRain(yearlyRain);
    sendCommandResponse("update-yearly-rainfall", result);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::requestHighLowData() {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::clearArchive() {
    bool result = station.clearArchive();
    sendCommandResponse("clear-archive", result);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::clearExtremeValues(bool dailyLows, bool monthlyLows, bool yearlyLows, bool dailyHighs, bool monthlyHighs, bool yearlyHighs) {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::clearAlarms() {
    bool result = station.clearActiveAlarms();
    sendCommandResponse("clear-alarms", result);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::clearCurrentData() {
    bool result = station.clearCurrentData();
    sendCommandResponse("clear-current-data", result);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::clearGraphData() {
    bool result = station.clearGraphPoints();
    sendCommandResponse("clear-graph-data", result);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::clearCumulativeValue(const std::string & which) {

    VP2Constants::CumulativeValue cumValue = VP2Constants::DAILY_RAIN_CUM;

    bool result = station.clearCumulativeValue(cumValue);
    sendCommandResponse("clear-cumulative-value", result);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::synchronizeConsoleTime() {
    ostringstream ss;

    ss << "{ \"time-response\" : ";
    if (station.updateConsoleTime()) {
        DateTime consoleTime;
        station.retrieveConsoleTime(consoleTime);
        ss << "\"SUCCESS\", \"console-time\" : \"" << Weather::formatDateTime(consoleTime) << "\" }";
    }
    else
        ss << "\"FAILURE\" }";

    sendResponse(ss.str());
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::requestConsoleTime() {
    ostringstream ss;
    DateTime consoleTime;
    station.retrieveConsoleTime(consoleTime);

    ss << "{ \"console-time\" : \"" << Weather::formatDateTime(consoleTime) << "\" }";
    sendResponse(ss.str());
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::updateArchiveInterval(int intervalMinutes) {
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::controlConsoleLamp(bool on) {
    bool result = station.controlConsoleLamp(on);
    sendCommandResponse("control-console-lamp", result);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::sendCommandResponse(const std::string & command, const std::string & result) {
    ostringstream ss;

    ss << "{ \"response\" : { \"command\" : \"" << command << "\", \"result\" : \"" << result << "\" } }";
    sendResponse(ss.str());
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::sendCommandResponse(const std::string & command, bool result) {
    ostringstream ss;
    const char * resultString = result ? "SUCCESS" : "FAILURE";
    sendCommandResponse(command, resultString);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void
Api::sendResponse(const std::string & response) {
    cout << "Sending RESTful response: " << response << endl;
}

void
Api::requestTimeZoneChoices() {
    ostringstream ss;

    ss << "{ \"time-zones\" : [";
    for (int i = 0; i < sizeof(TIME_ZONES) / sizeof(TIME_ZONES[0]); i++) {
        if (i != 0)
            ss << ", ";
        ss << "\"" << TIME_ZONES[i].name << "\"";
    }

    ss << "] }";

    sendResponse(ss.str());
}
}
